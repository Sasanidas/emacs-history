This untested alternative version of x_new_font in xterm.c
might solve the problem of access to scalable fonts
in Open Windows on Solaris.


Lisp_Object
x_new_font (f, fontname)
     struct frame *f;
     register char *fontname;
{
  int already_loaded;
  int n_matching_fonts;
  XFontStruct *font_info;
  char **font_names;

  /* Get a list of all the fonts that match this name.  Once we
     have a list of matching fonts, we compare them against the fonts
     we already have by comparing font ids.  */
  font_names = (char **) XListFontsWithInfo (x_current_display, fontname,
					     1024, &n_matching_fonts,
					     &font_info);
  /* Don't just give up if n_matching_fonts is 0.
     Apparently there's a bug on Suns: XListFontsWithInfo can
     fail to find a font, but XLoadQueryFont may still find it.  */

  /* See if we've already loaded a matching font. */
  already_loaded = -1;
  if (n_matching_fonts != 0)
    {
      int i, j;

      for (i = 0; i < n_fonts; i++)
	for (j = 0; j < n_matching_fonts; j++)
	  if (x_font_table[i]->fid == font_info[j].fid)
	    {
	      already_loaded = i;
	      fontname = font_names[j];
	      goto found_font;
	    }
    }
 found_font:
  
  /* If we have, just return it from the table.  */
  if (already_loaded > 0)
    f->display.x->font = x_font_table[already_loaded];
  
  /* Otherwise, load the font and add it to the table.  */
  else
    {
      int i;
      XFontStruct *font;

      /* Try to find a character-cell font in the list.  */
#if 0 
      /* A laudable goal, but this isn't how to do it.  */
      for (i = 0; i < n_matching_fonts; i++)
	if (! font_info[i].per_char)
	  break;
#else
      i = 0;
#endif

      /* See comment above.  */
      if (n_matching_fonts != 0)
	fontname = font_names[i];

      font = (XFontStruct *) XLoadQueryFont (x_current_display, fontname);
      if (! font)
	{
	  /* Free the information from XListFontsWithInfo.  */
	  if (n_matching_fonts)
	    XFreeFontInfo (font_names, font_info, n_matching_fonts);
	  return Qnil;
	}

      /* Do we need to create the table?  */
      if (x_font_table_size == 0)
	{
	  x_font_table_size = 16;
	  x_font_table
	    = (XFontStruct **) xmalloc (x_font_table_size
					* sizeof (x_font_table[0]));
	}
      /* Do we need to grow the table?  */
      else if (n_fonts >= x_font_table_size)
	{
	  x_font_table_size *= 2;
	  x_font_table
	    = (XFontStruct **) xrealloc (x_font_table,
					 (x_font_table_size
					  * sizeof (x_font_table[0])));
	}

      f->display.x->font = x_font_table[n_fonts++] = font;
    }
  
  /* Now make the frame display the given font.  */
  if (FRAME_X_WINDOW (f) != 0)
    {
      XSetFont (x_current_display, f->display.x->normal_gc,
		f->display.x->font->fid);
      XSetFont (x_current_display, f->display.x->reverse_gc,
		f->display.x->font->fid);
      XSetFont (x_current_display, f->display.x->cursor_gc,
		f->display.x->font->fid);

      x_set_window_size (f, f->width, f->height);
    }

  {
    Lisp_Object lispy_name = build_string (fontname);


    /* Free the information from XListFontsWithInfo.  The data
       we actually retain comes from XLoadQueryFont.  */
    XFreeFontInfo (font_names, font_info, n_matching_fonts);

    return lispy_name;
  }
}
