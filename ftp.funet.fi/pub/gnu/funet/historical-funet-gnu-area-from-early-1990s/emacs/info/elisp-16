Info file: elisp,    -*-Text-*-
produced by texinfo-format-buffer
from file: elisp.texinfo


This info file documents GNU Emacs Lisp.

Copyright (C) 1989 Richard M. Stallman.




File: elisp  Node: Variable Index, Prev: Function Index, Next: Concept Index, Up: Index

Variable Index
==============

This index includes Unix environment variables too.


* Menu:

* abbrev-all-caps: Abbreviations.
* abbrev-file-name: Abbreviations.
* abbrev-mode: Abbreviations.
* abbrevs-changed: Abbreviations.
* abbrev-start-location: Abbreviations.
* abbrev-start-location-buffer: Abbreviations.
* abbrev-table-name-list: Abbreviations.
* auto-fill-hook: Auto Filling.
* auto-mode-alist: Setting the Major Mode.
* auto-save-interval: Auto Saving.
* auto-save-visited-file-name: Auto Saving.
* backup-by-copying: How to make Backup files.
* backup-by-copying-when-linked: How to make Backup files.
* backup-by-copying-when-mismatch: How to make Backup files.
* blink-matching-paren: Blinking.
* blink-paren-hook: Blinking.
* buffer-auto-save-file-name: Auto Saving.
* buffer-backed-up: Backup Files.
* buffer-file-name: Buffer File Name.
* buffer-offer-save: Writing to Files.
* buffer-read-only: Read Only Buffers.
* buffer-saved-size: Buffer Contents.
* case-fold-search: Searching and Case.
* case-replace: Searching and Case.
* c-mode-abbrev-table: Abbreviations.
* c-mode-map: Global and Local Keymaps.
* c-mode-syntax-table: Some Standard Syntax Tables.
* command-history: Command History.
* command-line-args: Command Line Arguments.
* command-line-processed: Command Line Arguments.
* command-switch-alist: Command Line Arguments.
* completion-auto-help: Help Functions.
* completion-ignore-case: Completion.
* completion-ignored-extensions: Filename Completion.
* ctl-arrow: Miscellaneous Display Variables.
* ctl-arrow use: Columns.
* ctl-arrow use: String Type.
* ctl-x-4-map: Prefix Keys.
* ctl-x-map: Prefix Keys.
* current-prefix-arg: Prefix Command Arguments.
* cursor-in-echo-area: The Echo Area.
* debugger: Debug Functions.
* debug-on-error: Debug Functions.
* debug-on-error use: Errors.
* debug-on-next-call: Debug Functions.
* debug-on-quit: Debug Functions.
* default-abbrev-mode: Abbreviations.
* default-case-fold-search: Searching and Case.
* default-ctl-arrow: Miscellaneous Display Variables.
* default-directory: Operating System Environment.
* default-directory use: Functions that Create Subprocesses.
* default-fill-column: Auto Filling.
* default-major-mode: Setting the Major Mode.
* default-mode-line-format: Mode Line Variables.
* default-tab-width: Tab Stops.
* default-truncate-lines: Truncation.
* defining-kbd-macro: Keyboard Macros.
* delete-auto-save-files: Auto Saving.
* delete-exited-processes: Deleting Processes.
* disabled-command-hook: Disabling Commands.
* display-time-day-and-date: Operating System Environment.
* echo-keystrokes: Command Keys.
* edit-abbrevs-map: Abbreviations.
* EDITOR: Emacs Server.
* electric-future-map: A Sample Variable Description.
* emacs-build-time: Building Emacs.
* emacs-lisp-mode-syntax-table: Some Standard Syntax Tables.
* EMACSLOADPATH: Load Function.
* emacs-version: Building Emacs.
* enable-recursive-minibuffers: Minibuffer Basics.
* esc-map: Prefix Keys.
* exec-directory: Functions that Create Subprocesses.
* exec-path: Functions that Create Subprocesses.
* executing-kbd-macro: Keyboard Macros.
* executing-macro: Keyboard Macros.
* features: Features.
* file-precious-flag: How to make Backup files.
* fill-column: Auto Filling.
* find-file-hooks: Finding and Visiting Files.
* find-file-not-found-hooks: Finding and Visiting Files.
* ftp-password-alist: Editing Files on Remote Machines.
* fundamental-mode-abbrev-table: Abbreviations.
* gc-cons-threshold: Garbage Collection.
* global-abbrev-table: Abbreviations.
* global-map: Global and Local Keymaps.
* global-mode-string: Mode Line Variables.
* goal-column: Goal Column.
* help-char: Help Functions.
* help-form: Help Functions.
* help-map: Help Functions.
* help-map: Prefix Keys.
* HOME: File Names.
* HOME: Functions that Create Subprocesses.
* indent-line-function: Indenting.
* indent-region-function: Indenting.
* indent-tabs-mode: Indenting.
* inhibit-default-init: The Init File: .emacs.
* inhibit-local-variables: Setting the Major Mode.
* inhibit-quit: Aborting.
* inhibit-startup-message: When Emacs Starts Up.
* initial-major-mode: Information about Major Modes.
* insert-default-directory: Filename Completion.
* inverse-video: Miscellaneous Display Variables.
* kept-new-versions: Backup Files.
* kept-old-versions: Backup Files.
* keyboard-translate-table: Terminal Input.
* kill-emacs-hook: Getting out of Emacs.
* kill-ring: The Kill Ring.
* kill-ring-max: The Kill Ring.
* kill-ring-yank-pointer: The Kill Ring.
* lambda in hooks: Hooks.
* last-abbrev: Abbreviations.
* last-abbrev-location: Abbreviations.
* last-abbrev-text: Abbreviations.
* last-command: Interactive Call.
* last-command-char: Command Keys.
* last-input-char: Terminal Input.
* last-kbd-macro: Keyboard Macros.
* left-margin: Indenting.
* lisp-mode-abbrev-table: Abbreviations.
* lisp-mode-map: Global and Local Keymaps.
* list-command-history-max: Command History.
* list-directory-brief-switches: Directories.
* list-directory-verbose-switches: Directories.
* list-matching-lines-default-context-lines: Regular Expression Searching.
* load-in-progress: Load Function.
* load-path: Load Function.
* local-abbrev-table: Abbreviations.
* major-mode: Information about Major Modes.
* make-backup-files: How to make Backup files.
* mark-ring: The Mark.
* mark-ring-max: The Mark.
* max-lisp-eval-depth: Eval.
* max-lisp-eval-depth in macros: Lisp Macro Evaluation.
* max-specpdl-size: Eval.
* meta-flag: Terminal Input.
* meta-prefix-char: Prefix Keys.
* minibuffer-completion-confirm: Completion.
* minibuffer-completion-predicate: Completion.
* minibuffer-completion-table: Completion.
* minibuffer-help-form: Minibuffer Basics.
* minibuffer-local-completion-map: Completion.
* minibuffer-local-map: Minibuffer Basics.
* minibuffer-local-must-match-map: Completion.
* minibuffer-local-ns-map: Reading Text or Objects.
* minibuffer-scroll-window: Minibuffer Basics.
* minor-mode-alist: Minor Modes.
* mode-line-buffer-identification: Mode Line Variables.
* mode-line-format: Mode Line Format.
* mode-line-inverse-video: Miscellaneous Display Variables.
* mode-line-modified: Mode Line Variables.
* mode-line-process: Process Information.
* mode-name: Information about Major Modes.
* mode-specific-map: Prefix Keys.
* next-screen-context-lines: Vertical Scrolling.
* nil and t: nil and t.
* nil in keymap: Key Lookup.
* nil input stream: Input Streams.
* nil list: List Forms.
* nil output stream: Output Streams.
* nil symbol: Symbol Forms.
* noninteractive: Operating System Interface.
* no-redraw-on-reenter: Miscellaneous Display Variables.
* obarray: Creating and Interning Symbols.
* obarray example: Reading Text or Objects.
* obarray in completion: Completion.
* only-global-abbrevs: Abbreviations.
* overlay-arrow-position: Overlay Arrow.
* overlay-arrow-string: Overlay Arrow.
* page-delimiter: Paragraphs.
* paragraph-separate: Paragraphs.
* paragraph-start: Paragraphs.
* parse-sexp-ignore-comments: Input Functions.
* PATH: Functions that Create Subprocesses.
* pop-up-windows: Splitting Windows.
* prefix-arg: Prefix Command Arguments.
* print-escape-newlines: Output Functions.
* print-length: Output Functions.
* process-connection-type: Creating an Asynchronous Process.
* process-environment: Functions that Create Subprocesses.
* pure-bytes-used: Pure Storage.
* purify-flag: Pure Storage.
* query-replace-help: Replacements.
* quit signal: Debug Functions.
* quit-flag: Aborting.
* quit-flag: Command Keys.
* register-alist: Registers.
* repeat-complex-command-map: Command History.
* require-final-newline: Insertion.
* require-final-newline: Writing to Files.
* revert-buffer-function: Reverting.
* save-abbrevs: Abbreviations.
* scroll-step: Vertical Scrolling.
* selective-display: Selective Display.
* selective-display-ellipses: Selective Display.
* sentence-end: Paragraphs.
* setting-constant error: Symbol Forms.
* split-height-threshold: Splitting Windows.
* stack-trace-on-error: Debug Functions.
* standard-input: Input Functions.
* standard-output: Output Functions.
* suspend-hook: Suspending Emacs.
* suspend-resume-hook: Suspending Emacs.
* system-type: Building Emacs.
* t input stream: Input Streams.
* t output stream: Output Streams.
* t symbol: Symbol Forms.
* tab-stop-list: Tab Stops.
* tab-width: Tab Stops.
* temp-buffer-show-hook: Temporary Displays.
* temporary-goal-column: Goal Column.
* TERM: Terminal-specific Initialization.
* term-file-prefix: Terminal-specific Initialization.
* term-file-prefix: Terminal-specific Initialization.
* term-setup-hook: Terminal-specific Initialization.
* term-setup-hook: Terminal-specific Initialization.
* text-mode-abbrev-table: Abbreviations.
* text-mode-syntax-table: Some Standard Syntax Tables.
* this-command: Interactive Call.
* track-eol: Goal Column.
* truncate-lines: Truncation.
* truncate-partial-width-windows: Truncation.
* unread-command-char: Command Keys.
* values: Eval.
* visible-bell: Beeping.
* window-min-height: Window Size.
* window-min-width: Window Size.
* window-setup-hook: Terminal-specific Initialization.
* window-system: Window Systems.
* window-system-version: Window Systems.
* write-file-hooks: Writing to Files.


File: elisp  Node: Concept Index, Prev: Variable Index, Next: Key Index, Up: Index

Concept Index
=============


* Menu:

* ;  comment: Print Representation and Read Syntax.
* ? in characters: Character Type.
* \ in characters: Character Type.
* $ in display: Truncation.
* \ in display: Truncation.
* ~ in file names: File Names.
* % in format: Conversion of Characters and Strings.
* () in lists: List Type.
* . in lists: List Type.
* % in mode-line: Mode Line Format.
* " in print: Output Functions.
* \ in print: Output Functions.
* $ in regexp: Regular Expressions.
* ' in regexp: Regular Expressions.
* ( in regexp: Regular Expressions.
* ) in regexp: Regular Expressions.
* * in regexp: Regular Expressions.
* + in regexp: Regular Expressions.
* . in regexp: Regular Expressions.
* ? in regexp: Regular Expressions.
* [ in regexp: Regular Expressions.
* \ in regexp: Regular Expressions.
* \< in regexp: Regular Expressions.
* \> in regexp: Regular Expressions.
* ] in regexp: Regular Expressions.
* ^ in regexp: Regular Expressions.
* ^ in regexp: Regular Expressions.
* ` in regexp: Regular Expressions.
* | in regexp: Regular Expressions.
* & in replacement: Replacements.
* \ in replacement: Replacements.
* " in strings: String Type.
* \ in strings: String Type.
* \ in symbols: Symbol Type.
* abort: Aborting.
* absolute path name: File Names.
* active minibuffer: Minibuffers.
* address register: List Type.
* alist: Association List Type.
* alist: Association Lists.
* alist key: Association Lists.
* anonymous functions: Function Declarations.
* anonymous functions: Lisp Function Type.
* args-out-of-range error: Buffer Contents.
* args-out-of-range error: Creating Strings.
* args-out-of-range error: Sequences.
* args-out-of-range error: Text.
* argument descriptors: Interactive Call.
* argument evaluation form: Interactive Call.
* argument evaluation: Lisp Function Evaluation.
* argument prompt: Interactive Call.
* argument prompt: Interactive Call.
* arguments: Format of Descriptions.
* arguments: Names and Symbols.
* arguments: Names and Symbols.
* arguments: Writing Simple Functions.
* arith-error: Arithmetic Operations.
* arith-error example: Errors.
* arithmetic shift: Bitwise Operations on Integers.
* array: Array Type.
* array elements: Arrays.
* array: Sequences Arrays Vectors.
* ASCII characters: Character Type.
* association list: Association List Type.
* association list: Association Lists.
* asynchronous process: Creating an Asynchronous Process.
* atoms: Predicates on Lists.
* Auto Fill mode: Auto Filling.
* auto filling: Auto Filling.
* autoload: Autoload.
* autoload: Autoload Type.
* autoload errors: Autoload.
* autoloading commands: Command Overview.
* auto-save error: Reverting.
* \b: Character Type.
* \B in regexp: Regular Expressions.
* \b in regexp: Regular Expressions.
* backquote: Backquote.
* backslash in characters: Character Type.
* backslash in strings: String Type.
* backslash in symbols: Symbol Type.
* backspace: Character Type.
* balancing: Blinking.
* Bare impure Emacs: Building Emacs.
* batch mode: Operating System Interface.
* beeping: Beeping.
* beginning of line: Lines.
* beginning of line: Regular Expressions.
* beginning-of-buffer error: Motion.
* bell: Beeping.
* binding arguments: Lambda Expressions.
* binding arguments: Local Variables.
* binding local variables: Local Variables.
* bitwise and: Bitwise Operations on Integers.
* bitwise exclusive or: Bitwise Operations on Integers.
* bitwise not: Bitwise Operations on Integers.
* bitwise operations: Bitwise Operations on Integers.
* bitwise or: Bitwise Operations on Integers.
* blinking: Blinking.
* body: Writing Simple Functions.
* boolean: nil and t.
* boxed: Comparison of Numbers.
* break: Debugging.
* bucket: Creating and Interning Symbols.
* buffer: Buffer Type.
* buffer: Buffers.
* buffer characters: Text.
* buffer contents: Buffer Contents.
* buffer disable undo: Undo.
* buffer display: Buffers.
* buffer file name: Buffer File Name.
* buffer input stream: Input Streams.
* buffer internals: Buffer Internals.
* buffer list: The Buffer List.
* buffer modification: Buffer Modification.
* buffer name error: Buffer Names.
* buffer names: Buffer Names.
* buffer output stream: Output Streams.
* buffer text notation: Buffer Text Notation.
* buffer-local: Buffer Type.
* buffer-local: Buffers.
* buffer-local variable: Buffer Local Variables.
* buffer-local variables in modes: Major Modes.
* buffer-read-only error: Deletion.
* buffer-read-only error: Interactive Call.
* buffer-read-only error: Read Only Buffers.
* building Emacs: Building Emacs.
* building lists: Building Cons Cells and Lists.
* built-in: Accessing Function Definitions.
* built-in functions: Primitive Function Type.
* built-in: What is a Function.
* byte code: Byte Compilation.
* byte compiling require: Features.
* byte interpreter: Byte Compilation.
* Byte-code interpreter: Byte Compilation.
* byte-code interpreter: Evaluation.
* byte-compiling macros: Macro Declarations.
* byte-compiling macros: Macro Declarations.
* bytes: Strings and Characters.
* call stack: Debug Functions.
* call stack: Evaluation.
* call stack: Scope.
* capitalization: Character Case.
* car: List Type.
* car: Lists.
* case changes: Case Changes.
* case in replacements: Replacements.
* CBREAK: Flow Control.
* cdr: List Type.
* cdr: Lists.
* cells: Symbol Type.
* centering point: Vertical Scrolling.
* changing key bindings: Changing Key Bindings.
* character arrays: Strings and Characters.
* character case: Character Case.
* character: Character Type.
* character insertion: Insertion.
* character printing: Documentation Strings.
* character quote character: Syntax Classes.
* character set: Regular Expressions.
* character to string: Conversion of Characters and Strings.
* character to string: Conversion of Characters and Strings.
* character width: Columns.
* characters: Strings and Characters.
* cleanup forms: Non-local Exits.
* clipping restriction: Clipping Restrictions.
* close parenthesis: Blinking.
* @code{%}-constructs: Mode Line Format.
* command: Commands.
* command descriptions: Format of Descriptions.
* command history: Command History.
* command keys: Command Keys.
* command line arguments: Command Line Arguments.
* command line options: Command Line Arguments.
* command line switch: Command Line Arguments.
* command loop: Command Overview.
* command: What is a Function.
* command-level input loop: Command Overview.
* commands: Functions that Evaluate Several Expressions.
* commands: Lambda Expressions.
* comment ender: Syntax Classes.
* comment: Print Representation and Read Syntax.
* comment starter: Syntax Classes.
* comment syntax: Syntax Classes.
* Common Lisp declarations: Definitions and Declarations.
* Common Lisp errors: Errors.
* Common Lisp exiting: Non-local Exits.
* Common Lisp garbage collection: Garbage Collection.
* Common Lisp: Lisp History.
* Common Lisp: Lisp History.
* Common Lisp numbers: Comparison of Numbers.
* Common Lisp optional arguments: Lambda Expressions.
* Common Lisp rplaca: Alteration of List Structure.
* Common Lisp scoping: Name Resolution.
* Common Lisp set: Accessing Variable Values.
* Common Lisp `setq',: Special Forms.
* Common Lisp special forms: Special Forms.
* Common Lisp structured types: Types of Lisp Objects.
* Common Lisp symbols: Symbol Type.
* compilation: Byte Compilation.
* complement character set: Regular Expressions.
* complete key: Keymaps.
* complete sexp: Input Functions.
* complex arguments: Minibuffers.
* complex command: Command History.
* concatenating lists: Alteration of List Structure.
* concatenation: Creating Strings.
* conditional
* conditional evaluation: Conditionals.
* conditions: Error Conditions.
* cons cell: List Type.
* cons cell: Lists.
* cons cell: Predicates on Lists.
* cons cells: Building Cons Cells and Lists.
* consing: Garbage Collection.
* %-constructs: Mode Line Format.
* containing function: Interactive Call.
* continuation lines: Truncation.
* control
* control character keys: Changing Key Bindings.
* control character printing: Documentation Strings.
* control characters: Character Type.
* control characters: Global and Local Keymaps.
* control characters in display: Miscellaneous Display Variables.
* control characters in strings: String Type.
* conversion: Conversion of Characters and Strings.
* conversion specification: Conversion of Characters and Strings.
* copying lists: Association Lists.
* copying lists: Building Cons Cells and Lists.
* copying sequences: Building Cons Cells and Lists.
* copying sequences: Creating Strings.
* copying sequences: Sequences.
* copying sequences: Vectors.
* copying strings: Creating Strings.
* copying vectors: Vectors.
* creating keymaps: Creating Keymaps.
* current buffer: Buffer Type.
* current buffer: Buffers.
* current buffer excursion: Excursions.
* current buffer mark: The Mark.
* current buffer position: Point.
* current buffer: Selecting Buffers.
* current command: Interactive Call.
* debug Emacs: Terminal Input.
* debugger: Errors.
* Debugger mode: Debugger Mode Commands.
* debugging: Debugging.
* declaration: Definitions and Declarations.
* declarations: Definitions and Declarations.
* decrement register: List Type.
* default argument string: Interactive Call.
* default init file: The Init File: .emacs.
* default value: Buffer Local Variables.
* defining: Writing Simple Functions.
* definition: Definitions and Declarations.
* delete previous char: Deletion.
* delete whitespace: Deletion.
* delete whitespace: Deletion.
* deleting windows: Deleting Windows.
* deletion vs killing: Deletion.
* delimiter characters: Syntax Classes.
* descriptions: Format of Descriptions.
* dinging: Beeping.
* directories: Directories.
* disabled command: Disabling Commands.
* disabled property: Disabling Commands.
* display columns: Screen Attributes.
* display lines: Screen Attributes.
* documentation notation: Evaluation Notation.
* documentation string: Lambda Expressions.
* documentation strings: Documentation.
* dotted pair notation: List Type.
* double: Numbers.
* double-quote in strings: String Type.
* dynamic
* dynamic binding: Name Resolution.
* dynamic extent: Extent.
* dynamic scope: Name Resolution.
* \e: Character Type.
* echo area: The Echo Area.
* editing types: Editing Types.
* elements of sequences: Sequences.
* Emacs character standard notation: Documentation Strings.
* Emacs client: Emacs Server.
* empty list: List Type.
* end of buffer marker: Functions which Create Markers.
* end-of-buffer error: Motion.
* end-of-file error: Input Functions.
* end-of-file error: Input Functions.
* end-of-file error: Input Functions.
* end-of-file error: Interactive Call.
* environment: Evaluation.
* environment variables: Operating System Environment.
* equality: Equality Predicates.
* error
* error cleanup: Non-local Exits.
* error condition symbols: Error Conditions.
* error conditions: Error Conditions.
* error debugging: Debug Functions.
* error debugging: Debugging.
* error display: The Echo Area.
* error: Error Conditions.
* error: Errors.
* error handler: Errors.
* error in debug: Debug Functions.
* error message: Errors.
* error message notation: Error Messages.
* error name: Errors.
* error symbol: Error Conditions.
* error symbol: Errors.
* error-conditions property: Error Conditions.
* error-conditions property: Errors.
* error-conditions property: Standard Errors.
* errors: Errors.
* escape character: Character Type.
* escape: Character Type.
* escape characters: Output Functions.
* escape characters: Output Functions.
* etc/DOC: Documentation.
* evaluating: Names and Symbols.
* evaluating: Names and Symbols.
* evaluation error: Eval.
* evaluation: Evaluation.
* evaluation: Names and Symbols.
* evaluation notation: Evaluation Notation.
* evaluation of buffer contents: Eval.
* evaluation of forms: Evaluation.
* evaluation result: Eval.
* examples: Format of Descriptions.
* excursion: Excursions.
* execute program: Functions that Create Subprocesses.
* execute with prefix argument: Interactive Call.
* exit cleanup: Non-local Exits.
* exiting Emacs: Getting out of Emacs.
* explicit jumps: Explicit Jumps.
* expression prefix operator: Syntax Classes.
* expressions: Names and Symbols.
* expressions: Names and Symbols.
* Extent: Name Resolution.
* \f: Character Type.
* false: nil and t.
* feature: Features.
* field width: Conversion of Characters and Strings.
* file age: Information about Files.
* file attributes: Information about Files.
* file hard link: Modifying the File System.
* file hard links: Information about Files.
* file locks: File Locks.
* File mode specification error: Setting the Major Mode.
* file modification time: Information about Files.
* file names: File Names.
* file open error: Finding and Visiting Files.
* file symbolic links: Information about Files.
* file-already-exists error: Modifying the File System.
* file-already-exists error: Modifying the File System.
* file-error: Load Function.
* file-locked error: File Locks.
* file-supersession error: Buffer Modification.
* finding files: Finding and Visiting Files.
* finding windows: Selecting Windows.
* floating point: Number Type.
* floats: Numbers.
* flow control characters: Flow Control.
* flow control example: Terminal Input.
* flush input: Command Keys.
* fonts: Format of Descriptions.
* forcing redisplay: Sitting.
* form: Forms.
* formatting: Conversion of Characters and Strings.
* formatting objects: Output Functions.
* formfeed: Character Type.
* forms: Evaluation.
* free list: Garbage Collection.
* full keymap: Creating Keymaps.
* full keymaps: Keymap Type.
* function
* function body: Writing Simple Functions.
* function call debugging: Debug Functions.
* function call: Lisp Function Evaluation.
* function call result: Lisp Function Evaluation.
* function calls: Primitive Function Evaluation.
* function cell: Byte Compilation.
* function cell in autoload: Autoload.
* function cell: Symbol Components.
* function declaration: Function Declarations.
* function definition: Accessing Function Definitions.
* function definition: Definitions and Declarations.
* function descriptions: Format of Descriptions.
* function evaluation: Function Invocation.
* function evaluation: Lambda Expressions.
* function evaluation: Lisp Function Evaluation.
* function in keymap: Key Lookup.
* function input stream: Input Streams.
* function invocation: Function Invocation.
* function keys: Terminal-specific Initialization.
* function mapping and concat: Mapping Functions.
* function output stream: Output Streams.
* function: Primitive Function Type.
* function quoting: Function Declarations.
* function: What is a Function.
* function: What is a Function.
* functions in modes: Major Modes.
* Functions: Names and Symbols.
* functions: Names and Symbols.
* Fundamental mode: Major Modes.
* garbage collection protection: Writing Emacs Primitives.
* garbage collector: Garbage Collection.
* global keymap: Global and Local Keymaps.
* global keymap: Global and Local Keymaps.
* global modes: Major and Minor Modes.
* global variable: Global Variables.
* goal column: Lines.
* handling: Errors.
* hash notation: Print Representation and Read Syntax.
* highlighting: Miscellaneous Display Variables.
* hook function: Hooks.
* hook: Hooks.
* hook: Hooks.
* horizontal scrolling: Horizontal Scrolling.
* horizontal split lines: Truncation.
* implicit sequence: Sequencing.
* indefinite extent: Extent.
* indefinite scope: Name Resolution.
* indenting: Indenting.
* indenting lists: Input Functions.
* indirection: List Forms.
* infinite recursion: Eval.
* init file: The Init File: .emacs.
* initializtion: When Emacs Starts Up.
* innermost list: Input Functions.
* input loop: Command Overview.
* input stream: Input Streams.
* input stream: Stream Type.
* insert killed text: The Kill Ring.
* inside comment: Input Functions.
* inside string: Input Functions.
* integer to binary: Conversion of Characters and Strings.
* integer to decimal: Building Cons Cells and Lists.
* integer to decimal: Conversion of Characters and Strings.
* integer to decimal: Conversion of Characters and Strings.
* integer to decimal: Creating Strings.
* integer to decimal: Vectors.
* integer to hexidecimal: Conversion of Characters and Strings.
* integer to octal: Conversion of Characters and Strings.
* integer to string: Conversion of Characters and Strings.
* integers: Number Type.
* integers: Numbers.
* interactive call: Command Overview.
* interactive completion: Interactive Call.
* interactive: Functions that Evaluate Several Expressions.
* interactive sessions: Operating System Interface.
* interned symbol: Creating and Interning Symbols.
* interning: Creating and Interning Symbols.
* Invalid format error: Conversion of Characters and Strings.
* invalid function: List Forms.
* invalid prefix characters error: Changing Key Bindings.
* invalid-function error: Key Lookup.
* invalid-function error: List Forms.
* invalid-read-syntax error: Print Representation and Read Syntax.
* invalid-regexp error: Regular Expressions.
* iteration: Iteration.
* joining lists: Alteration of List Structure.
* key: Association List Type.
* key binding: Keymaps.
* key: Keymaps.
* key lookup: Key Lookup.
* key lookup: Keymaps.
* key sequence error: Changing Key Bindings.
* keyboard macro characters: Command Keys.
* keyboard macro execution: Interactive Call.
* keyboard macro in keymap: Key Lookup.
* keyboard macro termination: Beeping.
* keyboard macros: Keyboard Macros.
* keymap entries: Key Lookup.
* keymap in keymap: Key Lookup.
* keymap in keymap: Key Lookup.
* keymap: Keymap Type.
* keymaps in modes: Major Modes.
* keymaps: Keymaps.
* keystroke command: Command Overview.
* keystroke command: What is a Function.
* keystrokes: Keymaps.
* kill command repetition: Interactive Call.
* kill ring: Text.
* kill ring: The Kill Ring.
* kill to character: The Kill Ring.
* killed buffer: Killing Buffers.
* lambda expression: Lambda Expressions.
* lambda in debug: Debug Functions.
* lambda in keymap: Key Lookup.
* lambda symbol: Lisp Function Type.
* lambda-list: Lambda Expressions.
* lexical comparison: Comparison of Characters and Strings.
* lexical scope: Name Resolution.
* libraries: Byte Compilation.
* libraries: Loading.
* library evaluation: Loading.
* library files: Major and Minor Modes.
* line wrapping: Truncation.
* lines in region: Lines.
* lines: Lines.
* Lisp
* Lisp expressions: Lisp Expressions.
* Lisp function call: Lisp Function Evaluation.
* Lisp function: Lisp Function Type.
* Lisp history: Lisp History.
* Lisp Interaction mode: Starting with Lisp.
* Lisp interpreter: Byte Compilation.
* Lisp macro: Lisp Macro Type.
* Lisp nesting error: Eval.
* Lisp printer: Output Functions.
* Lisp printer: Print Representation and Read Syntax.
* Lisp reader: Input Functions.
* Lisp reader: Loading.
* Lisp reader: Print Representation and Read Syntax.
* list elements: Accessing Elements of Lists.
* list elements: Using Lists as Sets.
* list form evaluation: List Forms.
* list form: List Forms.
* list in keymap: Key Lookup.
* list length: Sequences.
* list: List Type.
* list: Lists.
* list moving: Lisp Expressions.
* lists as sets: Using Lists as Sets.
* literal evaluation: Self-Evaluating Forms.
* literal: Format of Descriptions.
* load errors: Loading.
* loading: Loading.
* local
* local binding: Binding Variables Locally.
* local keymap: Global and Local Keymaps.
* local keymap: Global and Local Keymaps.
* local value: Binding Variables Locally.
* local variable: Local Variables.
* logical and: Bitwise Operations on Integers.
* logical exclusive or: Bitwise Operations on Integers.
* logical inclusive or: Bitwise Operations on Integers.
* logical not: Bitwise Operations on Integers.
* logical shift: Bitwise Operations on Integers.
* lower case: Character Case.
* MacLisp: Lisp History.
* MacLisp: Lisp History.
* macro
* macro call: Lisp Macro Evaluation.
* macro compilation: Byte Compilation.
* macro descriptions: Format of Descriptions.
* macro evaluation: Lisp Macro Evaluation.
* macro evaluation: Writing a Macro.
* macro expansion: Macro Declarations.
* macro expansion: Writing a Macro.
* macro expression: Macro Declarations.
* macro: Macros.
* major mode keymap: Global and Local Keymaps.
* major modes: Major Modes.
* mapping function: Mapping Functions.
* mark excursion: Excursions.
* mark ring: The Mark.
* mark: The Mark.
* marker argument: Interactive Call.
* marker garbage collection: Markers.
* marker input stream: Input Streams.
* marker: Marker Type.
* marker: Markers.
* marker output stream: Output Streams.
* marker updating: Markers.
* markers as numbers: Markers.
* markers: Numbers.
* Matching: Searching and Matching.
* matching: Searching and Matching.
* memory allocation: Pure Storage.
* meta character: Character Type.
* meta character keys: Changing Key Bindings.
* meta character printing: Documentation Strings.
* meta characters: Creating Keymaps.
* minibuffer input: Recursive Editing.
* minibuffer keymaps: Global and Local Keymaps.
* minibuffer: Minibuffers.
* minibuffer use: Command History.
* minibuffer window: Selecting Windows.
* minor mode: Minor Modes.
* mode line format: Mode Line Format.
* mode loading: Major Modes.
* mode: Major and Minor Modes.
* mode:: Setting the Major Mode.
* mode-class property: Information about Major Modes.
* modulus: Arithmetic Operations.
* most-local binding: Local Variables.
* \n: Character Type.
* \n in print: Output Functions.
* \N in replacement: Replacements.
* name resolution: Name Resolution.
* name resolution: Name Resolution.
* Narrowing: Clipping Restrictions.
* natural numbers: Predicates on Numbers.
* network login: Telnet.
* New File message: Finding and Visiting Files.
* newline: Character Type.
* newline in Auto Fill mode: Insertion.
* newline in print: Output Functions.
* newline in strings: String Type.
* next command: Prefix Command Arguments.
* next input: Command Keys.
* nil in lists: List Type.
* No Match error: Interactive Call.
* no-catch error: Explicit Jumps.
* non-local exit: Local Variables.
* non-local exits: Non-local Exits.
* normal storage: Pure Storage.
* number equality: Comparison of Numbers.
* numbers: Number Type.
* numeric prefix: Conversion of Characters and Strings.
* obarray: Creating and Interning Symbols.
* object internals: Object Internals.
* object to string: Conversion of Characters and Strings.
* object to string: Output Functions.
* object type tags: Object Internals.
* object: Types of Lisp Objects.
* objects as forms: Evaluation.
* obsolete buffer: Buffer Modification.
* octal characters: Character Type.
* octal characters: Command Keys.
* octal to character: Insertion.
* onstant: Format of Descriptions.
* operating system environment: Operating System Environment.
* option descriptions: Format of Descriptions.
* optional arguments: Lambda Expressions.
* ordinary: Regular Expressions.
* Outline mode: Deletion.
* output stream: Stream Type.
* overflow: Numbers.
* overlay arrow: Overlay Arrow.
* padding: Conversion of Characters and Strings.
* paragraphs: Paragraphs.
* parameter: Writing Simple Functions.
* parameters: Writing Simple Functions.
* parenthesis characters: Syntax Classes.
* parenthesis depth: Input Functions.
* parenthesis depth: Input Functions.
* parenthesis depth: Lisp Expressions.
* parenthesis: List Type.
* parenthesis matching: Blinking.
* parse state: Input Functions.
* path names: Directories.
* path names: File Names.
* patterns: Regular Expressions.
* pausing: Sitting.
* peculiar error: Error Conditions.
* peculiar error: Errors.
* per-buffer-local variable: Buffer Local Variables.
* permanent goal column: Goal Column.
* permission: Information about Files.
* pipes: Creating an Asynchronous Process.
* plist: Property Lists.
* point: Buffer Type.
* point excursion: Excursions.
* point in restriction: Point.
* Point: Point.
* position argument: Interactive Call.
* position: Positions.
* predicates: Type Predicates.
* prefix argument: Prefix Command Arguments.
* prefix argument unreading: Command Keys.
* prefix command argument: Command Overview.
* prefix key: Keymaps.
* prefix key: Prefix Keys.
* preventing prefix key: Key Lookup.
* primitive
* primitive: Accessing Function Definitions.
* primitive evaluation: Primitive Function Evaluation.
* primitive function call: Primitive Function Evaluation.
* primitive function internals: Writing Emacs Primitives.
* primitive function: Primitive Function Type.
* primitive: What is a Function.
* print name cell: Symbol Components.
* print name: Creating and Interning Symbols.
* print name: Symbol Type.
* print representation: Conversion of Characters and Strings.
* print representation: Output Functions.
* print representation: Print Representation and Read Syntax.
* printing limits: Output Functions.
* printing notation: Printing Notation.
* process filter: Process Filters.
* process input: Sending Input to Processes.
* process internals: Process Internals.
* process output: Receiving Information from Processes.
* process: Process Type.
* process: Processes.
* process sentinel: Process Sentinels.
* process signals: Sending Signals to Processes.
* processed prefix argument: Interactive Call.
* processed prefix argument: Prefix Command Arguments.
* program arguments: Functions that Create Subprocesses.
* program directories: Functions that Create Subprocesses.
* programming types: Programming Types.
* property list cell: Symbol Components.
* property list: Property Lists.
* property lists vs association lists: Property Lists.
* protected forms: Non-local Exits.
* provide: Features.
* pseudo terminal: Processes.
* ptys: Creating an Asynchronous Process.
* Punctuation characters: Syntax Classes.
* pure storage: Pure Storage.
* question mark in characters: Character Type.
* quit error: Aborting.
* quit error: Recursive Editing.
* quit error: Recursive Editing.
* quit signal: Debugging.
* quiting Emacs: Getting out of Emacs.
* quote character: Input Functions.
* quoting characters: Output Functions.
* quoting: Identity and Quoting.
* \r: Character Type.
* random numbers: Random Numbers.
* raw prefix argument: Prefix Command Arguments.
* read buffer name: Interactive Call.
* read character: Interactive Call.
* read command name: Interactive Call.
* read command name: Interactive Call.
* read directory name: Interactive Call.
* read evaluation: Print Representation and Read Syntax.
* read file name: Interactive Call.
* read function name: Interactive Call.
* read key sequence: Interactive Call.
* read number: Interactive Call.
* read only buffer: Read Only Buffers.
* read sexp: Interactive Call.
* read string: Interactive Call.
* read symbol: Interactive Call.
* read syntax: Input Functions.
* read syntax: Print Representation and Read Syntax.
* read user option: Interactive Call.
* read variable: Interactive Call.
* reading symbols: Creating and Interning Symbols.
* reals: Number Type.
* rebinding: Changing Key Bindings.
* record command history: Interactive Call.
* recursion: Evaluation.
* recursion: Iteration.
* recursive command loop: Recursive Editing.
* recursive minibuffer: Minibuffers.
* recursively: Major Modes.
* redo: Undo.
* regexp alternative: Regular Expressions.
* regexp grouping: Regular Expressions.
* regexp: Regular Expressions.
* region argument: Interactive Call.
* region error: Text.
* region: The Region.
* registers: Registers.
* regular expression: Regular Expressions.
* regular expression searching: Regular Expression Searching.
* regular expression syntax: Regular Expressions.
* remote files: Editing Files on Remote Machines.
* remove clipping restriction: Clipping Restrictions.
* replace bindings: Changing Key Bindings.
* replace characters: Deletion.
* replacements: Replacements.
* requiring: Features.
* resize redisplay: Screen Attributes.
* rest arguments: Lambda Expressions.
* restrictions: Clipping Restrictions.
* return: Character Type.
* return: Names and Symbols.
* returns: Names and Symbols.
* runtime stack bindings: Symbol Forms.
* runtime stack: Debug Functions.
* runtime stack: Errors.
* runtime stack: Evaluation.
* runtime stack: Local Variables.
* runtime stack: Name Resolution.
* runtime stack: Scope.
* \S in regexp: Regular Expressions.
* \s in regexp: Regular Expressions.
* saving window information: Window Configurations.
* Scope: Name Resolution.
* *scratch*: Information about Major Modes.
* *scratch*: The Buffer List.
* screen attributes: Screen Attributes.
* screen layout: Window Configuration Type.
* screen size: Screen Attributes.
* screen: Window Basics.
* search-failed error: Searching for Strings.
* searching and case: Searching and Case.
* searching: Searching and Matching.
* selected window: Selecting Buffers.
* selected window: Window Basics.
* selected window: Window Type.
* selecting windows: Selecting Windows.
* self-evaluating form: Self-Evaluating Forms.
* self-insert at point: Point.
* sequence length: Sequences.
* sequence: Sequence Type.
* sequence: Sequences.
* sequence: Sequences Arrays Vectors.
* sequence: Sequencing.
* sexp argument evaluation: Interactive Call.
* sexp start: Input Functions.
* sexps: Lisp Expressions.
* shadow: Scope.
* shell environment variables: Functions that Create Subprocesses.
* short-circuit: Conditional Expressions.
* side-effects: Evaluation.
* signal: Errors.
* sitting: Sitting.
* skipping comments: Input Functions.
* sorting: Sorting.
* sparse keymap: Creating Keymaps.
* sparse keymaps: Keymap Type.
* special form descriptions: Format of Descriptions.
* special form evaluation: Control Structures.
* special form evaluation: Special Forms.
* special form: Primitive Function Type.
* special form: Special Forms.
* special mode: Information about Major Modes.
* spliced: Backquote.
* splitting windows: Buffers and Windows.
* splitting windows: Splitting Windows.
* stack frame: Evaluation.
* stack trace: Debug Functions.
* standard
* start up: When Emacs Starts Up.
* stream: Stream Type.
* streams: Streams.
* string: Arrays.
* string elements: Strings and Characters.
* string equality: Comparison of Characters and Strings.
* string in keymap: Key Lookup.
* string in keymap: Key Lookup.
* string input stream: Input Streams.
* string length: Sequences.
* string quote characters: Syntax Classes.
* string search: Searching for Strings.
* string: String Type.
* string to character: Conversion of Characters and Strings.
* string to integer: Conversion of Characters and Strings.
* string to object: Input Functions.
* strings: Strings and Characters.
* subroutine: Accessing Function Definitions.
* subroutine: Primitive Function Type.
* subrs: Primitive Function Type.
* subrs: What is a Function.
* subtypes: Types of Lisp Objects.
* supertype: Types of Lisp Objects.
* suspend evaluation: Recursive Editing.
* suspend X Windows: Suspending Emacs.
* suspending Emacs: Suspending Emacs.
* switches: Command Line Arguments.
* symbol cells: Symbol Components.
* symbol components: Symbol Components.
* Symbol constituents: Syntax Classes.
* symbol equality: Creating and Interning Symbols.
* symbol evaluation: Symbol Forms.
* symbol function cell dereferencing: List Forms.
* symbol in keymap: Key Lookup.
* symbol indirection dereferencing: List Forms.
* symbol name hashing: Creating and Interning Symbols.
* symbol names: Names and Symbols.
* symbol: Symbol Type.
* symbol: Symbols.
* symbol syntax: Syntax Classes.
* symbol value cell: Accessing Variable Values.
* synchronous process: Creating a Synchronous Process.
* syntactic sugar: Writing a Macro.
* syntax classes: Syntax Classes.
* syntax flags: Syntax Classes.
* syntax table example: Major Modes.
* syntax table internals: Syntax Tables.
* syntax table: Syntax Table Type.
* syntax table: Syntax Tables.
* syntax tables in modes: Major Modes.
* \t: Character Type.
* tab: Character Type.
* tab character width: Columns.
* tab deletion: Deletion.
* tab stops: Tab Stops.
* tag: Explicit Jumps.
* tag on runtime stack: Explicit Jumps.
* temporary goal column: Goal Column.
* termcap: Terminal-specific Initialization.
* terminal input: Terminal Input.
* terminal output: Terminal Output.
* terminal-initialization: Terminal-specific Initialization.
* terminal-specific initialization: Terminal-specific Initialization.
* terminate keyboard macro: Command Keys.
* text insertion: Insertion.
* text parsing: Syntax Tables.
* text region: Text.
* text: Text.
* textual order: Control Structures.
* tiled windows: Window Basics.
* top-level form: Input Functions.
* top-level form: Loading.
* trapping: Errors.
* true: nil and t.
* truth value: nil and t.
* type checking internals: Object Internals.
* type checking: Type Predicates.
* type predicates: Type Predicates.
* type: Types of Lisp Objects.
* unbinding keys: Changing Key Bindings.
* undefined key: Keymaps.
* underlining: Underlining.
* undo avoidance: Deletion.
* unexec: Building Emacs.
* uninterned symbol: Creating and Interning Symbols.
* uninterned symbol: Creating and Interning Symbols.
* Unix: Building Emacs.
* unprocessed prefix argument: Interactive Call.
* unprocessed prefix argument: Prefix Command Arguments.
* unwind-protect error: Eval.
* upper case: Character Case.
* uppercase key sequence: Command Keys.
* user input notation: User Input Notation.
* user option: Global Variables.
* user variable: Global Variables.
* user-defined errors: Error Conditions.
* user-defined types: Types of Lisp Objects.
* \v: Character Type.
* value: Association List Type.
* value cell: Global Variables.
* value cell: Symbol Components.
* variable binding: Local Variables.
* variable descriptions: Format of Descriptions.
* variable limit error: Eval.
* variable lookup: Name Resolution.
* variable lookup: Symbol Forms.
* variable: Names and Symbols.
* variable unbinding: Local Variables.
* variable: Variables.
* variable-documentation: Global Variables.
* variable-documentation property: Documentation.
* variables, buffer-local: Buffer Local Variables.
* variables: Names and Symbols.
* vector: Arrays.
* vector evaluation: Self-Evaluating Forms.
* vector evaluation: Vectors.
* vector length: Sequences.
* vector: Vector Type.
* vector: Vectors.
* vertical motion column: Goal Column.
* vertical scrolling: Vertical Scrolling.
* vertical tab: Character Type.
* View mode: Finding and Visiting Files.
* visited file: Buffer File Name.
* visited file mode: Setting the Major Mode.
* visiting files: Finding and Visiting Files.
* VMS: Building Emacs.
* void function: List Forms.
* void: Symbol Type.
* void variable: Symbol Forms.
* void variable: Variables.
* void: Variables.
* void-function error: Accessing Function Definitions.
* void-function error: List Forms.
* void-variable error: Accessing Variable Values.
* void-variable error: Accessing Variable Values.
* void-variable error: Local Variables.
* void-variable error: Symbol Forms.
* void-variable error: Variables.
* \W in regexp: Regular Expressions.
* \w in regexp: Regular Expressions.
* waiting for command key input: Command Keys.
* waiting: Sitting.
* whitespace: Character Type.
* Whitespace characters: Syntax Classes.
* whitespace syntax: Syntax Classes.
* window configuration: Window Configuration Type.
* window configurations: Window Configurations.
* window excursions: Excursions.
* window internals: Window Internals.
* window point internals: Window Internals.
* window position: Window Point.
* window resizing: Window Size.
* window top line: Window Point.
* window: Window Basics.
* window: Window Type.
* Word constituents: Syntax Classes.
* word syntax: Syntax Classes.
* wrong-number-of-arguments error: Lambda Expressions.
* wrong-type-argument error: Command Overview.
* wrong-type-argument error: Type Predicates.
* X Window System: Window Basics.
* X window system: Window Systems.
* yank: The Kill Ring.
* zero-origin: Array Type.
binding: Binding Variables Locally.
definition: List Forms.
expansion: Lisp Macro Evaluation.
expressions: Conditional Expressions.
extent: Name Resolution.
interpreter: Evaluation.
name: Error Conditions.
structures: Control Structures.
types: Types of Lisp Objects.
types: Types of Lisp Objects.


File: elisp  Node: Key Index, Prev: Concept Index, Next: Program Index, Up: Index

Key Index
=========


* Menu:

* * in interactive: Interactive Call.
* ? in minibuffer: Reading Text or Objects.
* C-c: Prefix Keys.
* C-g: Aborting.
* C-g: Command Keys.
* C-g in minibuffer: Minibuffer Basics.
* C-h: Prefix Keys.
* C-q: Flow Control.
* C-s: Flow Control.
* C-u: Prefix Command Arguments.
* C-x: Prefix Keys.
* C-x-4: Prefix Keys.
* ESC: Changing Key Bindings.
* ESC: Creating Keymaps.
* ESC: Global and Local Keymaps.
* ESC: Prefix Keys.
* ESC: Prefix Keys.
* LFD in minibuffer: Minibuffer Basics.
* meta characters: Global and Local Keymaps.
* M-x: Command History.
* M-x: Interactive Call.
* RET in minibuffer: Minibuffer Basics.
* SPC in minibuffer: Reading Text or Objects.
* TAB in minibuffer: Reading Text or Objects.


File: elisp  Node: Program Index, Prev: Key Index, Next: Data Type Index, Up: Index

Program Index
=============

This index includes files too.


* Menu:

* chmod: Modifying the File System.
* cp: Modifying the File System.
* default.el: When Emacs Starts Up.
* .emacs customization: Major Modes.
* .emacs: Disabling Commands.
* .emacs key bindings: Changing Key Bindings.
* .emacs load-path: Load Function.
* .emacs: When Emacs Starts Up.
* lisp-mode.el: Major Modes.
* ln: Modifying the File System.
* loaddefs.el: Disabling Commands.
* loadst: Functions that Create Subprocesses.
* loadup.el: Building Emacs.
* ls: Directories.
* mv: Modifying the File System.
* rm: Modifying the File System.
* simple.el: Disabling Commands.
* startup.el: When Emacs Starts Up.
* temacs: Building Emacs.
* xemacs: Building Emacs.


File: elisp  Node: Data Type Index, Prev: Program Index, Up: Index

Data Type Index
===============

Probably nothing here.


* Menu:




